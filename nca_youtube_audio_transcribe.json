{
  "name": "NCA YouTube ‚Üí Audio ‚Üí Transcribe (+ optional SRT)",
  "nodes": [
    {
      "id": "b8f4fe7f-1b8a-4f9a-8a67-2bb7b3a6c0d1",
      "name": "Code: Resolve YouTube URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -600,
        20
      ],
      "parameters": {
        "jsCode": "const urlFromForm = $json.youtube_url || $json.body?.url || $json.url;\nconst fallback = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';\nconst target = urlFromForm || fallback;\nreturn [{\n  json: {\n    ...$json,\n    url: target,\n    format: 'm4a',\n  },\n}];"
      }
    },
    {
      "id": "51f3b3d9-bd20-4a15-9d4d-74b3a2a2b7f9",
      "name": "‚¨áÔ∏è HTTP ‚Üí NCA /v1/media/download",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -400,
        20
      ],
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.NCA_API_BASE || 'http://host.docker.internal:8080') + '/v1/' + 'media/download' }}",
        "authentication": "genericCredentialType",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"url\": \"{{$json.url}}\",\n  \"format\": \"{{$json.format}}\",\n  \"extract_audio\": true,\n  \"prefer_free_formats\": true\n}",
        "options": {
          "timeout": 60000
        },
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "name": "NCA Toolkit"
        }
      }
    },
    {
      "id": "d2c9b0e7-7a42-4e45-96e2-8f1d2f7b6b10",
      "name": "Code: Normalize Download Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        20
      ],
      "parameters": {
        "jsCode": "const r = $json;\nconst audioUrl = r.audio_url ?? r.url ?? r.output_url ?? r.media_url ?? r.response?.url ?? r.response?.media_url;\nif (!audioUrl) {\n  throw new Error('Download response missing audio URL.');\n}\nreturn [{\n  json: {\n    ...$json,\n    audio_url: audioUrl,\n  },\n}];"
      }
    },
    {
      "id": "f4b3d9c2-9bde-43c1-ae0c-2af6b9b5432a",
      "name": "üó£Ô∏è HTTP ‚Üí NCA /v1/media/transcribe",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        20
      ],
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.NCA_API_BASE || 'http://host.docker.internal:8080') + '/v1/' + 'media/transcribe' }}",
        "authentication": "genericCredentialType",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"media_url\": \"{{$json.audio_url}}\",\n  \"output_format\": \"json\",\n  \"timestamps\": true,\n  \"diarize\": false\n}",
        "options": {
          "timeout": 60000
        },
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "name": "NCA Toolkit"
        }
      }
    },
    {
      "id": "e7b3f6a8-1d67-4c7e-8a7a-4f9a9a2b7e6f",
      "name": "Code: Normalize Transcribe Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        20
      ],
      "parameters": {
        "jsCode": "const r = $json;\nconst out = {\n  ...$json,\n  job_id: r.job_id ?? r.response?.job_id ?? null,\n  status: r.status ?? r.response?.status ?? null,\n  transcript: r.transcript ?? r.response?.transcript ?? null,\n  segments: r.segments ?? r.response?.segments ?? null,\n};\nreturn [{ json: out }];"
      }
    },
    {
      "id": "a3e4b5c6-d7e8-49f1-92a3-1b2c3d4e5f60",
      "name": "‚ùì IF: Async (job_id exists)?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        420,
        20
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.job_id}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      }
    },
    {
      "id": "1c2d3e4f-5a6b-47c8-9d0e-2f3a4b5c6d7e",
      "name": "Code: Sync Path Normalize Transcript",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        160
      ],
      "parameters": {
        "jsCode": "const r = $json;\nlet segments = [];\nif (Array.isArray(r.segments)) {\n  segments = r.segments;\n} else if (r.transcript && Array.isArray(r.transcript.segments)) {\n  segments = r.transcript.segments;\n} else if (typeof r.transcript === 'string') {\n  segments = [{ start: 0, end: 0, text: r.transcript }];\n}\nreturn [{\n  json: {\n    ...$json,\n    segments,\n  },\n}];"
      }
    },
    {
      "id": "0d2c6f2a-9b1e-4d5c-8a0e-9c6b5d4f3a2b",
      "name": "Set Poll Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        640,
        -120
      ],
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "number": [
            {
              "name": "maxPolls",
              "value": 15
            },
            {
              "name": "pollDelaySeconds",
              "value": 12
            }
          ],
          "string": [
            {
              "name": "job_id",
              "value": "={{$json.job_id}}"
            },
            {
              "name": "api_base",
              "value": "={{$env.NCA_API_BASE || 'http://host.docker.internal:8080'}}"
            },
            {
              "name": "audio_url",
              "value": "={{$json.audio_url}}"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      }
    },
    {
      "id": "f1a2b3c4-d5e6-4f78-91a2-b3c4d5e6f7a8",
      "name": "Code: Build Poll Items",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        840,
        -120
      ],
      "parameters": {
        "jsCode": "const max = $json.maxPolls || 15;\nreturn Array.from({ length: max }, (_, index) => ({\n  json: {\n    ...$json,\n    pollAttempt: index + 1,\n  },\n  pairedItem: 0,\n}));"
      }
    },
    {
      "id": "9a8b7c6d-5e4f-43a2-9b1c-7d6e5f4a3b2c",
      "name": "üîÅ Split In Batches (Loop)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        1040,
        -120
      ],
      "parameters": {
        "batchSize": 1
      }
    },
    {
      "id": "2b3c4d5e-6f7a-4b8c-9d0e-1f2a3b4c5d6e",
      "name": "‚è≥ Wait (pollDelaySeconds)",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1240,
        -120
      ],
      "parameters": {
        "amount": "={{$json.pollDelaySeconds}}",
        "unit": "seconds"
      }
    },
    {
      "id": "c7d8e9f0-a1b2-4c3d-9e0f-1a2b3c4d5e6f",
      "name": "üì° HTTP ‚Üí Job Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1440,
        -120
      ],
      "parameters": {
        "method": "GET",
        "url": "={{ ($env.NCA_API_BASE || 'http://host.docker.internal:8080') + '/v1/' + 'toolkit/job/status' }}",
        "authentication": "genericCredentialType",
        "sendQuery": true,
        "queryParametersUi": {
          "parameter": [
            {
              "name": "job_id",
              "value": "={{$json.job_id}}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        },
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "name": "NCA Toolkit"
        }
      }
    },
    {
      "id": "e1f2a3b4-c5d6-4789-9abc-d1e2f3a4b5c6",
      "name": "Code: Normalize Status Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1640,
        -120
      ],
      "parameters": {
        "jsCode": "const r = $json;\nconst status = r.status ?? r.response?.status ?? null;\nconst transcript = r.transcript ?? r.response?.transcript ?? null;\nconst segments = r.segments ?? r.response?.segments ?? null;\nreturn [{\n  json: {\n    ...$json,\n    status,\n    transcript,\n    segments,\n  },\n}];"
      }
    },
    {
      "id": "ab12cd34-ef56-47a8-9b0c-1d2e3f4a5b6c",
      "name": "‚úÖ IF: status == completed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1840,
        -120
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.status}}",
              "operation": "equal",
              "value2": "completed"
            }
          ]
        }
      }
    },
    {
      "id": "3d4c5b6a-7e8f-4a9b-b0c1-d2e3f4a5b6c7",
      "name": "üèÅ Polling Complete",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2040,
        -240
      ],
      "parameters": {}
    },
    {
      "id": "7b8c9d0e-1f2a-43b4-85c6-d7e8f9a0b1c2",
      "name": "üîÇ Next Poll",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2040,
        -20
      ],
      "parameters": {}
    },
    {
      "id": "0a1b2c3d-4e5f-46a7-8b9c-0d1e2f3a4b5c",
      "name": "‚û°Ô∏è Batches: Next",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        2240,
        -20
      ],
      "parameters": {
        "options": {}
      }
    },
    {
      "id": "6c7d8e9f-0a1b-4c2d-9e3f-4a5b6c7d8e9f",
      "name": "Code: Normalize Final Transcript",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        -240
      ],
      "parameters": {
        "jsCode": "const r = $json;\nlet segments = [];\nif (Array.isArray(r.segments)) {\n  segments = r.segments;\n} else if (r.transcript && Array.isArray(r.transcript.segments)) {\n  segments = r.transcript.segments;\n} else if (typeof r.transcript === 'string') {\n  segments = [{ start: 0, end: 0, text: r.transcript }];\n}\nreturn [{\n  json: {\n    ...$json,\n    segments,\n  },\n}];"
      }
    },
    {
      "id": "c1d2e3f4-a5b6-47c8-9d0e-1f2a3b4c5d6e",
      "name": "Code: Build SRT (Optional)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        -160
      ],
      "parameters": {
        "jsCode": "const toSrtTimestamp = (sec = 0) => {\n  const ms = Math.max(0, Math.floor(sec * 1000));\n  const hours = String(Math.floor(ms / 3600000)).padStart(2, '0');\n  const minutes = String(Math.floor((ms % 3600000) / 60000)).padStart(2, '0');\n  const seconds = String(Math.floor((ms % 60000) / 1000)).padStart(2, '0');\n  const milliseconds = String(ms % 1000).padStart(3, '0');\n  return `${hours}:${minutes}:${seconds},${milliseconds}`;\n};\n\nconst segments = Array.isArray($json.segments) ? $json.segments : [];\nlet index = 1;\nconst lines = [];\n\nfor (const segment of segments) {\n  const start = typeof segment.start === 'number' ? segment.start : segment.from ?? segment.begin ?? 0;\n  const end = typeof segment.end === 'number' ? segment.end : segment.to ?? segment.finish ?? (start + 2);\n  const text = (segment.text ?? segment.content ?? '').toString().trim();\n  if (!text) continue;\n  lines.push(String(index++));\n  lines.push(`${toSrtTimestamp(start)} --> ${toSrtTimestamp(end)}`);\n  lines.push(text);\n  lines.push('');\n}\n\nreturn [{\n  json: {\n    ...$json,\n    srt: lines.join('\\n'),\n  },\n}];"
      }
    },
    {
      "id": "8d9e0f1a-2b3c-44d5-96e7-f8a9b0c1d2e3",
      "name": "Code: Build transcript.json",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        -320
      ],
      "parameters": {
        "jsCode": "const segments = Array.isArray($json.segments) ? $json.segments : [];\nreturn [{\n  json: {\n    ...$json,\n    data: { segments },\n  },\n}];"
      }
    },
    {
      "id": "7c8d9e0f-1a2b-43c4-85d6-e7f8a9b0c1d2",
      "name": "üß± To Binary: transcript.json",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        2640,
        -320
      ],
      "parameters": {
        "operation": "jsonToBinary",
        "dataPropertyName": "data",
        "fileName": "transcript.json"
      }
    },
    {
      "id": "f2a3b4c5-d6e7-48f9-9a0b-1c2d3e4f5a6b",
      "name": "üß± To Binary: subtitles.srt",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        2640,
        -160
      ],
      "parameters": {
        "operation": "textToBinary",
        "dataPropertyName": "srt",
        "fileName": "subtitles.srt"
      }
    },
    {
      "id": "e3f4a5b6-c7d8-49e0-9f1a-2b3c4d5e6f7a",
      "name": "üìÅ Google Drive ‚Üí Upload transcript.json",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2840,
        -320
      ],
      "parameters": {
        "operation": "upload",
        "binaryPropertyName": "data",
        "options": {
          "parentId": ""
        }
      }
    },
    {
      "id": "a4b5c6d7-e8f9-4a0b-9c1d-2e3f4a5b6c7d",
      "name": "üìÅ Google Drive ‚Üí Upload subtitles.srt",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2840,
        -160
      ],
      "parameters": {
        "operation": "upload",
        "binaryPropertyName": "srt",
        "options": {
          "parentId": ""
        }
      }
    },
    {
      "id": "c7a8b9d0-e1f2-43a4-95b6-c7d8e9f0a1b2",
      "name": "üìå Overview & Setup",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1210,
        -380
      ],
      "parameters": {
        "content": "## Start Here\nThis workflow accepts a YouTube URL, downloads audio via NCA Toolkit (/v1/media/download), transcribes via /v1/media/transcribe, optionally polls async jobs, and can output transcript.json and subtitles.srt to Google Drive.\n\nTrigger\n- Use the embedded form to submit a YouTube URL\n\nCredentials to configure\n- Google Drive OAuth2 (for uploads)\n- NCA Toolkit HTTP Header credential (stores x-api-key)\n\nConfig\n- api_base defaults to http://host.docker.internal:8080 (override with env var)\n- format defaults to m4a; adjust in the Resolve URL code node if desired\n\nDocs\n- NCA Toolkit: https://github.com/stephengpope/no-code-architects-toolkit"
      },
      "color": "#FFD166"
    },
    {
      "id": "1a2b3c4d-5e6f-47a8-9b0c-1d2e3f4a5b6d",
      "name": "üß≠ Flow Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -220,
        -220
      ],
      "parameters": {
        "content": "## Download ‚Üí Transcribe Path\n1) Resolve YouTube URL ensures we have a valid url from webhook/manual\n2) /v1/media/download returns an audio URL (normalized in next node)\n3) /v1/media/transcribe may respond sync (transcript ready) or async (job_id)\n4) IF routes to either immediate finish or polling\n\nUse the normalization nodes to adapt to minor API shape differences."
      },
      "color": "#06D6A0"
    },
    {
      "id": "9f8e7d6c-5b4a-4392-8a1b-2c3d4e5f6a7b",
      "name": "üîÅ Polling Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1100,
        -350
      ],
      "parameters": {
        "content": "## Polling Loop\n- Uses Build Poll Items + Split In Batches to iterate\n- Wait honors pollDelaySeconds\n- Job Status checks /v1/toolkit/job/status?job_id=...\n- Exit when status === completed ‚Üí normalize to segments"
      },
      "color": "#118AB2"
    },
    {
      "id": "ab98cd76-5432-4b10-9f87-65a4b3c2d1e0",
      "name": "üì§ Output Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2860,
        -420
      ],
      "parameters": {
        "content": "## Outputs\n- transcript.json: normalized segments saved to Drive\n- subtitles.srt: optional SRT built from segments\n\nSet parentId on both Google Drive nodes to a target folder if desired."
      },
      "color": "#EF476F"
    },
    {
      "id": "0b1c2d3e-4f5a-46b7-8c9d-0e1f2a3b4c5d",
      "name": "üîí Security Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1000,
        320
      ],
      "parameters": {
        "content": "## Security\n- API key is injected via header x-api-key\n- Prefer n8n credentials or environment variables for secrets\n- Validate incoming webhook payloads (schema and source)"
      },
      "color": "#FFD700"
    },
    {
      "id": "2b130cd4-cab9-41e8-a7fd-1643bc15cea0",
      "name": "üìù Form Trigger (YouTube URL)",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 1,
      "position": [
        -1220,
        -40
      ],
      "parameters": {
        "formTitle": "NCA YouTube Transcription",
        "formDescription": "Submit a YouTube URL to download audio, transcribe, and optionally create subtitles.",
        "respondWithJson": true,
        "formFields": {
          "values": [
            {
              "fieldLabel": "YouTube URL",
              "fieldType": "string",
              "requiredField": true,
              "defaultValue": "",
              "fieldName": "youtube_url",
              "options": {}
            }
          ]
        }
      },
      "webhookId": "33f8798d-0482-47f3-8d0a-48f35ed2e989"
    }
  ],
  "connections": {
    "üìù Form Trigger (YouTube URL)": {
      "main": [
        [
          {
            "node": "Code: Resolve YouTube URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Resolve YouTube URL": {
      "main": [
        [
          {
            "node": "‚¨áÔ∏è HTTP ‚Üí NCA /v1/media/download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚¨áÔ∏è HTTP ‚Üí NCA /v1/media/download": {
      "main": [
        [
          {
            "node": "Code: Normalize Download Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Normalize Download Response": {
      "main": [
        [
          {
            "node": "üó£Ô∏è HTTP ‚Üí NCA /v1/media/transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üó£Ô∏è HTTP ‚Üí NCA /v1/media/transcribe": {
      "main": [
        [
          {
            "node": "Code: Normalize Transcribe Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Normalize Transcribe Response": {
      "main": [
        [
          {
            "node": "‚ùì IF: Async (job_id exists)?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùì IF: Async (job_id exists)?": {
      "main": [
        [
          {
            "node": "Set Poll Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code: Sync Path Normalize Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Poll Context": {
      "main": [
        [
          {
            "node": "Code: Build Poll Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Build Poll Items": {
      "main": [
        [
          {
            "node": "üîÅ Split In Batches (Loop)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÅ Split In Batches (Loop)": {
      "main": [
        [
          {
            "node": "‚è≥ Wait (pollDelaySeconds)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚û°Ô∏è Batches: Next",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚è≥ Wait (pollDelaySeconds)": {
      "main": [
        [
          {
            "node": "üì° HTTP ‚Üí Job Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì° HTTP ‚Üí Job Status": {
      "main": [
        [
          {
            "node": "Code: Normalize Status Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Normalize Status Response": {
      "main": [
        [
          {
            "node": "‚úÖ IF: status == completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ IF: status == completed": {
      "main": [
        [
          {
            "node": "üèÅ Polling Complete",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üîÇ Next Poll",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üèÅ Polling Complete": {
      "main": [
        [
          {
            "node": "Code: Normalize Final Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÇ Next Poll": {
      "main": [
        [
          {
            "node": "‚û°Ô∏è Batches: Next",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚û°Ô∏è Batches: Next": {
      "main": [
        [
          {
            "node": "üîÅ Split In Batches (Loop)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code: Normalize Final Transcript": {
      "main": [
        [
          {
            "node": "Code: Build transcript.json",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code: Build SRT (Optional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Sync Path Normalize Transcript": {
      "main": [
        [
          {
            "node": "Code: Build transcript.json",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code: Build SRT (Optional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Build transcript.json": {
      "main": [
        [
          {
            "node": "üß± To Binary: transcript.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß± To Binary: transcript.json": {
      "main": [
        [
          {
            "node": "üìÅ Google Drive ‚Üí Upload transcript.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Build SRT (Optional)": {
      "main": [
        [
          {
            "node": "üß± To Binary: subtitles.srt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß± To Binary: subtitles.srt": {
      "main": [
        [
          {
            "node": "üìÅ Google Drive ‚Üí Upload subtitles.srt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "errorWorkflow": "",
    "timezone": "America/Toronto"
  },
  "staticData": null,
  "active": false,
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "pinData": {},
  "tags": [],
  "versionId": "6132d247-73a4-442d-b60a-84e7aa1676bb",
  "id": null
}